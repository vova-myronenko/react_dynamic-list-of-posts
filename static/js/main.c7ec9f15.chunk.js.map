{"version":3,"sources":["api/api.js","api/users.js","components/Loader/Loader.jsx","components/PostsList/PostsList.jsx","api/posts.js","components/NewCommentForm/NewCommentForm.jsx","api/comments.js","components/PostDetails/PostDetails.jsx","App.jsx","index.js"],"names":["BASE_URL","get","url","fetch","then","response","json","result","data","Loader","className","PostsList","selectedUserId","selectedPostId","setSelectedPostId","setIsLoading","useState","posts","setPosts","useEffect","userId","length","map","post","key","id","title","type","onClick","postId","onPostClicked","classNames","button","NewCommentForm","addNewComment","commentName","setCommentName","commentEmail","setCommentEmail","commentBody","setCommentBody","onSubmit","event","preventDefault","name","placeholder","required","value","onChange","target","getPostComments","removeComment","commentId","method","addComment","headers","body","JSON","stringify","PostDetails","isLoading","setPost","postComments","setPostComments","commentsVisible","setCommentsVisible","Promise","all","comments","comment","email","App","users","setUsers","setSelectedUserId","user","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.c7ec9f15.chunk.js","sourcesContent":["const BASE_URL = 'https://mate-api.herokuapp.com';\n\nexport function get(url) {\n  return fetch(`${BASE_URL}${url}`)\n    .then(response => response.json())\n    .then(result => result.data);\n}\n\nexport function remove(url) {\n  return fetch(`${BASE_URL}${url}`, {\n    method: 'DELETE',\n  });\n}\n\nexport function post(url, data) {\n  return fetch(`${BASE_URL}${url}`, {\n    method: 'POST',\n    headers: {\n      'Content-type': 'application/json; charset=UTF-8',\n    },\n    body: JSON.stringify(data),\n  });\n}\n","import { get } from './api';\n\nexport const getUsers = () => get('/users');\n","import React from 'react';\nimport './Loader.scss';\n\nexport const Loader = () => (\n  <div className=\"Loader\">\n    <div className=\"Loader__content\" />\n  </div>\n);\n","import React, { useState, useEffect } from 'react';\n\nimport { getAllPosts } from '../../api/posts';\nimport { getUserPosts } from '../../api/posts';\n\nimport { Loader } from '../Loader';\n\nimport classNames from 'classnames';\n\nimport './PostsList.scss';\n\nexport const PostsList = ({ selectedUserId, selectedPostId,setSelectedPostId, setIsLoading }) => {\n  const [posts, setPosts] = useState([]);\n\n  useEffect(() => {\n    if (selectedUserId) {\n      getUserPosts(selectedUserId).then(setPosts);\n    } else {\n      getAllPosts().then(setPosts);\n    }\n  }, [selectedUserId])\n\n  const onPostClicked = (postId) => {\n    if (postId === selectedPostId) {\n      return setSelectedPostId(0);\n    }\n    \n    setSelectedPostId(postId);\n    setIsLoading(true);\n  };\n\n  // const onLoading = () => {\n  //   return isLoading\n  //    ? <Loader />\n  //    : (\n  //     <p>\n  //       Pick a post to see the details\n  //     </p>\n  //   )\n  // };\n\n  return (\n    <div className=\"PostsList\">\n      <h2>Posts:</h2>\n      {posts.length ? (\n        <ul className=\"PostsList__list\">\n        {posts.map(post => (\n          <li\n            key={post.id}\n            className=\"PostsList__item\"\n          >\n            <div>\n              <b>[User #{post.userId}]: </b>\n              {post.title}\n            </div>\n            <button\n              type=\"button\"\n              onClick={() => onPostClicked(post.id)}\n              className={classNames({\n                'PostsList__button': true,\n                button: true,\n                'button--active': post.id === selectedPostId\n              })}\n            >\n              {post.id === selectedPostId\n                ? 'Close'\n                : 'Open'\n              }\n            </button>\n          </li>\n        ))}\n      </ul>\n      ) : (\n        <p>\n          User has no posts yet\n        </p>\n      )}\n    </div>\n  );\n};\n","import { get } from './api';\n\nexport const getAllPosts = () => get('/posts');\n\nexport const getUserPosts = userId => get(`/posts?userId=${userId}`);\n\nexport const getPost = postId => get(`/posts/${postId}`);\n","import React, { useState } from 'react';\nimport './NewCommentForm.scss';\n\nexport const NewCommentForm = ({ addNewComment }) => {\n  const [commentName, setCommentName] = useState('');\n  const [commentEmail, setCommentEmail] = useState('');\n  const [commentBody, setCommentBody] = useState('');\n  \n  const handleSubmit = (event) => {\n    event.preventDefault();\n\n    addNewComment(commentName, commentEmail, commentBody);\n\n    setCommentName('');\n    setCommentEmail('');\n    setCommentBody('');\n  };\n  \n  return (\n    <form\n      className=\"NewCommentForm\"\n      onSubmit={handleSubmit}\n    >\n      <div className=\"form-field\">\n        <input\n          type=\"text\"\n          name=\"name\"\n          placeholder=\"Your name\"\n          className=\"NewCommentForm__input\"\n          required\n          value={commentName}\n          onChange={event => setCommentName(event.target.value)}\n        />\n      </div>\n  \n      <div className=\"form-field\">\n        <input\n          type=\"text\"\n          name=\"email\"\n          placeholder=\"Your email\"\n          className=\"NewCommentForm__input\"\n          required\n          value={commentEmail}\n          onChange={event => setCommentEmail(event.target.value)}\n        />\n      </div>\n  \n      <div className=\"form-field\">\n        <textarea\n          name=\"body\"\n          placeholder=\"Type comment here\"\n          className=\"NewCommentForm__input\"\n          required\n          value={commentBody}\n          onChange={event => setCommentBody(event.target.value)}\n        />\n      </div>\n  \n      <button\n        type=\"submit\"\n        className=\"NewCommentForm__submit-button button\"\n      >\n        Add a comment\n      </button>\n    </form>\n  );\n};\n","import { get, remove, post } from './api';\n\nexport const getPostComments = postId => get(`/comments?postId=${postId}`);\n\nexport const removeComment = commentId => remove(`/comments/${commentId}`);\n\nexport const addComment = data => post(`/comments`, data);\n","import React, { useState, useEffect } from 'react';\n\nimport { NewCommentForm } from '../NewCommentForm';\nimport { Loader } from '../Loader';\n\nimport { getPost } from '../../api/posts';\nimport { getPostComments, removeComment, addComment } from '../../api/comments';\n\nimport './PostDetails.scss';\n\nexport const PostDetails = ({ selectedPostId, isLoading, setIsLoading }) => {\n  const [post, setPost] = useState(null);\n  const [postComments, setPostComments] = useState([]);\n  const [commentsVisible, setCommentsVisible] = useState(true);\n  \n  useEffect(() => {\n    setPost(null);\n    Promise.all([getPost(selectedPostId), getPostComments(selectedPostId)])\n      .then(([post, comments]) => {\n        setPost(post);\n        setPostComments(comments);\n        setCommentsVisible(true);\n        setIsLoading(false);\n      })\n  }, [selectedPostId, setIsLoading]);\n\n  const setCommentsVisibility = () => {\n    setCommentsVisible(value => !value);\n  };\n\n  const deleteComment = (commentId) => {\n    removeComment(commentId)\n      .then(() => getPostComments(selectedPostId))\n      .then(setPostComments);\n  };\n\n  const addNewComment = (name, email, body) => {\n    const newComment = {\n      name,\n      email,\n      body,\n      postId: selectedPostId,\n    };\n    \n    addComment(newComment)\n      .then(() => getPostComments(selectedPostId))\n      .then(setPostComments);\n  };\n\n  const onLoading = () => {\n    return isLoading\n     ? <Loader />\n     : (\n      <p>\n        Pick a post to see the details\n      </p>\n    )\n  }\n\n  return (\n    <div className=\"PostDetails\">\n      <h2>Post details:</h2>\n\n      {post ? (\n        <>\n          <section className=\"PostDetails__post\">\n            <p>\n              {post.title}\n            </p>\n          </section>\n    \n          <section className=\"PostDetails__comments\">\n            <button\n              type=\"button\"\n              className=\"button\"\n              onClick={setCommentsVisibility}\n            >\n              {commentsVisible\n                ? `Hide ${postComments.length} comment(s)`\n                : `Show ${postComments.length} comment(s)`\n              }\n            </button>\n\n            <ul className=\"PostDetails__list\">\n              {commentsVisible && postComments.map(comment => (\n                <li\n                  className=\"PostDetails__list-item\"\n                  key={comment.id}\n                >\n                  <button\n                    type=\"button\"\n                    title=\"click to delete\"\n                    className=\"PostDetails__remove-button button\"\n                    onClick={() => deleteComment(comment.id)}\n                  >\n                    X\n                  </button>\n                  <p>\n                    {comment.body}\n                  </p>\n                </li>\n              ))}\n            </ul>\n          </section>\n    \n          <section>\n            <div className=\"PostDetails__form-wrapper\">\n              <NewCommentForm\n                addNewComment={addNewComment}\n              />\n            </div>\n          </section>\n        </>\n      ) : onLoading()}\n    </div>\n  );\n}\n","import React, { useState, useEffect } from 'react';\n\nimport './App.scss';\nimport './styles/general.scss';\n\nimport { getUsers } from './api/users';\n\nimport { PostsList } from './components/PostsList';\nimport { PostDetails } from './components/PostDetails';\n\nconst App = () => {\n  const [users, setUsers] = useState([]);\n  const [selectedUserId, setSelectedUserId] = useState(0);\n  const [selectedPostId, setSelectedPostId] = useState(0);\n  const [isLoading, setIsLoading] = useState(false);\n\n  useEffect(() => {\n    getUsers().then(setUsers)\n  }, [])\n\n  const onUserSelected = (event) => {\n    setSelectedUserId(+event.target.value);\n  };\n\n  return (\n    <div className=\"App\">\n      <header className=\"App__header\">\n        <label>\n          Select a user: &nbsp;\n\n          <select\n            className=\"App__user-selector\"\n            onChange={onUserSelected}\n          >\n            <option value=\"0\">All users</option>\n            {users.map(user => (\n              <option value={user.id} key={user.id}>\n                {user.name}\n              </option>\n            ))}\n          </select>\n        </label>\n      </header>\n\n      <main className=\"App__main\">\n        <div className=\"App__sidebar\">\n          <PostsList\n            selectedPostId={selectedPostId}\n            setSelectedPostId={setSelectedPostId}\n            selectedUserId={selectedUserId}\n            setIsLoading={setIsLoading}\n          />\n        </div>\n\n        <div className=\"App__content\">\n          <PostDetails\n            selectedPostId={selectedPostId}\n            isLoading={isLoading}\n            setIsLoading={setIsLoading}\n          />\n        </div>\n      </main>\n    </div>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\n\nimport App from './App';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}